;; Test our lowerings that do things like `A >= B + 1 ==> A > B` to make better
;; use of immediate encodings.

test compile precise-output
set unwind_info=false
target aarch64

function %a(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111001
    v2 = icmp.i32 uge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4097
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, ls
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1001
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, ls
;   ret

function %b(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111000
    v2 = icmp.i32 uge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4096
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, ls
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1000
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, ls
;   ret

function %c(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111111
    v2 = icmp.i32 uge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4369
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, ls
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1111
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, ls
;   ret

function %d(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111110
    v2 = icmp.i32 uge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4368
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, ls
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1110
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, ls
;   ret

function %e(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111001
    v2 = icmp.i32 sge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4097
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, le
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1001
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, le
;   ret

function %f(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111000
    v2 = icmp.i32 sge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4096
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, le
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1000
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, le
;   ret

function %g(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111111
    v2 = icmp.i32 sge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4369
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, le
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1111
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, le
;   ret

function %h(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0x111110
    v2 = icmp.i32 sge v0, v1
    return v2
}

; VCode:
; block0:
;   movz w4, #4368
;   movk w4, w4, #17, LSL #16
;   subs wzr, w4, w0
;   cset x0, le
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov w4, #0x1110
;   movk w4, #0x11, lsl #16
;   cmp w4, w0
;   cset x0, le
;   ret

