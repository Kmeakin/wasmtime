test compile precise-output
target x86_64

function %load8(i64) -> i8 {
block0(v0: i64):
  v1 = load.i8 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload8_i16(i64) -> i16 {
block0(v0: i64):
  v1 = uload8.i16 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload8_i32(i64) -> i32 {
block0(v0: i64):
  v1 = uload8.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload8_i64(i64) -> i64 {
block0(v0: i64):
  v1 = uload8.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload8_i16(i64) -> i16 {
block0(v0: i64):
  v1 = sload8.i16 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movsbq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsbq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload8_i32(i64) -> i32 {
block0(v0: i64):
  v1 = sload8.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movsbq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsbq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload8_i64(i64) -> i64 {
block0(v0: i64):
  v1 = sload8.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movsbq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsbq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load16(i64) -> i16 {
block0(v0: i64):
  v1 = load.i16 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzwq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload16_i32(i64) -> i32 {
block0(v0: i64):
  v1 = uload16.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzwq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload16_i64(i64) -> i64 {
block0(v0: i64):
  v1 = uload16.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzwq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload16_i32(i64) -> i32 {
block0(v0: i64):
  v1 = sload16.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movswq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movswq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload16_i64(i64) -> i64 {
block0(v0: i64):
  v1 = sload16.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movswq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movswq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load32(i64) -> i32 {
block0(v0: i64):
  v1 = load.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    0(%rdi), %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl (%rdi), %eax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload32_i64(i64) -> i64 {
block0(v0: i64):
  v1 = uload32.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    0(%rdi), %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl (%rdi), %eax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload32_i64(i64) -> i64 {
block0(v0: i64):
  v1 = sload32.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movslq  0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movslq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    0(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq (%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

