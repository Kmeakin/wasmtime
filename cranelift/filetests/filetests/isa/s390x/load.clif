test compile precise-output
target s390x

function %load8(i64) -> i8 {
block0(v0: i64):
  v1 = load.i8 v0
  return v1
}

; VCode:
; block0:
;   llc %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llc %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %uload8_i16(i64) -> i16 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = uextend.i16 v1
  return v2
}

; VCode:
; block0:
;   llc %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llc %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %uload8_i32(i64) -> i32 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = uextend.i32 v1
  return v2
}

; VCode:
; block0:
;   llc %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llc %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %uload8_i64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = uextend.i64 v1
  return v2
}

; VCode:
; block0:
;   llgc %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llgc %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %sload8_i16(i64) -> i16 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = sextend.i16 v1
  return v2
}

; VCode:
; block0:
;   lb %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lb %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %sload8_i32(i64) -> i32 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = sextend.i32 v1
  return v2
}

; VCode:
; block0:
;   lb %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lb %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %sload8_i64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = sextend.i64 v1
  return v2
}

; VCode:
; block0:
;   lgb %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgb %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %load16(i64) -> i16 {
block0(v0: i64):
  v1 = load.i16 v0
  return v1
}

; VCode:
; block0:
;   llh %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llh %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %uload16_i32(i64) -> i32 {
block0(v0: i64):
  v1 = load.i16 v0
  v2 = uextend.i32 v1
  return v2
}

; VCode:
; block0:
;   llh %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llh %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %uload16_i64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i16 v0
  v2 = uextend.i64 v1
  return v2
}

; VCode:
; block0:
;   llgh %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llgh %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %sload16_i32(i64) -> i32 {
block0(v0: i64):
  v1 = load.i16 v0
  v2 = sextend.i32 v1
  return v2
}

; VCode:
; block0:
;   lh %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lh %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %sload16_i64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i16 v0
  v2 = sextend.i64 v1
  return v2
}

; VCode:
; block0:
;   lgh %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgh %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %load32(i64) -> i32 {
block0(v0: i64):
  v1 = load.i32 v0
  return v1
}

; VCode:
; block0:
;   l %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   l %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %uload32_i64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i32 v0
  v2 = uextend.i64 v1
  return v2
}

; VCode:
; block0:
;   llgf %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llgf %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %sload32_i64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i32 v0
  v2 = sextend.i64 v1
  return v2
}

; VCode:
; block0:
;   lgf %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgf %r2, 0(%r2) ; trap: heap_oob
;   br %r14

function %load64(i64) -> i64 {
block0(v0: i64):
  v1 = load.i64 v0
  return v1
}

; VCode:
; block0:
;   lg %r2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lg %r2, 0(%r2) ; trap: heap_oob
;   br %r14

